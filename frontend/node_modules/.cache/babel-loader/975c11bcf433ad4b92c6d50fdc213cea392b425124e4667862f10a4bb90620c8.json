{"ast":null,"code":"var _jsxFileName = \"/Users/nino/Desktop/app/quiz_API/quiz_project/frontend/src/pages/EditQuiz2.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport styles from \"../styles/createquiz.module.css\";\nimport { Link, useParams } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst EditQuiz2 = () => {\n  _s();\n  const {\n    quizId\n  } = useParams();\n  const [quiz, setQuiz] = useState(null);\n  useEffect(() => {\n    const handleData = async () => {\n      try {\n        const response = await axios.get(`http://localhost:8000/api/quiz/start/${quizId}`, {\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer xqV72-moMK_a_u_QJTHyybjqNfiMlQpZaoyCWPP_St1hs-a3Lw`\n          }\n        });\n        const quizData = response.data;\n        setQuiz(quizData);\n      } catch (error) {\n        console.error(\"Error fetching quiz:\", error.message);\n      }\n    };\n    handleData();\n  }, []);\n  const [showSuccess, setShowSuccess] = useState(false);\n  const [selectedQuestionIndex, setSelectedQuestionIndex] = useState(0);\n  const handleQuestionChange = (index, newText) => {\n    const updatedQuiz = {\n      ...quiz\n    };\n    const updatedQuestions = [...updatedQuiz.quizquestions];\n    updatedQuestions[index].question = newText;\n    updatedQuiz.quizquestions = updatedQuestions;\n    setQuiz(updatedQuiz);\n  };\n  const handleAnswerChange = (answerIndex, newValue) => {\n    const updatedQuiz = {\n      ...quiz\n    };\n    const updatedQuestions = [...updatedQuiz.quizquestions];\n    console.log(updatedQuestions);\n    updatedQuestions[selectedQuestionIndex].answers[answerIndex] = newValue;\n    updatedQuiz.quizquestions = updatedQuestions;\n    setQuiz(updatedQuiz);\n  };\n  const handleRadioChange = answerIndex => {\n    const updatedQuiz = {\n      ...quiz\n    };\n    const updatedQuestions = [...updatedQuiz.quizquestions];\n    updatedQuestions[selectedQuestionIndex].correctAnswerIndex = answerIndex;\n    updatedQuiz.quizquestions = updatedQuestions;\n    setQuiz(updatedQuiz);\n  };\n\n  // const handleEdit = async () => {\n  //   try {\n  //     await axios.put(`https://crudapi.co.uk/api/v1/quiz/${uuid}`, quiz, {\n  //       headers: {\n  //         \"Content-Type\": \"application/json\",\n  //         Authorization: `Bearer xqV72-moMK_a_u_QJTHyybjqNfiMlQpZaoyCWPP_St1hs-a3Lw`,\n  //       },\n  //     });\n  //     setShowSuccess(true);\n  //     console.log(quiz);\n  //   } catch (error) {\n  //     console.error(\"Error updating quiz:\", error.message);\n  //   }\n  // };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"nav\", {\n      children: /*#__PURE__*/_jsxDEV(Link, {\n        to: \"/QuizApp/welcomeadmin\",\n        className: `${styles.f30} ${styles.f200} `,\n        children: \"Quizz\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_s(EditQuiz2, \"rbwblwafSAaT8epiVJcbpHdf8pc=\", false, function () {\n  return [useParams];\n});\n_c = EditQuiz2;\nexport default EditQuiz2;\nvar _c;\n$RefreshReg$(_c, \"EditQuiz2\");","map":{"version":3,"names":["useEffect","useState","axios","styles","Link","useParams","jsxDEV","_jsxDEV","Fragment","_Fragment","EditQuiz2","_s","quizId","quiz","setQuiz","handleData","response","get","headers","Authorization","quizData","data","error","console","message","showSuccess","setShowSuccess","selectedQuestionIndex","setSelectedQuestionIndex","handleQuestionChange","index","newText","updatedQuiz","updatedQuestions","quizquestions","question","handleAnswerChange","answerIndex","newValue","log","answers","handleRadioChange","correctAnswerIndex","children","to","className","f30","f200","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/nino/Desktop/app/quiz_API/quiz_project/frontend/src/pages/EditQuiz2.jsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport styles from \"../styles/createquiz.module.css\";\nimport { Link, useParams } from \"react-router-dom\";\n\nconst EditQuiz2 = () => {\n  const { quizId } = useParams();\n  const [quiz, setQuiz] = useState(null);\n\n  useEffect(() => {\n    const handleData = async () => {\n      try {\n        const response = await axios.get(\n          `http://localhost:8000/api/quiz/start/${quizId}`,\n          {\n            headers: {\n              \"Content-Type\": \"application/json\",\n              Authorization: `Bearer xqV72-moMK_a_u_QJTHyybjqNfiMlQpZaoyCWPP_St1hs-a3Lw`,\n            },\n          }\n        );\n\n        const quizData = response.data;\n        setQuiz(quizData);\n      } catch (error) {\n        console.error(\"Error fetching quiz:\", error.message);\n      }\n    };\n\n    handleData();\n  }, []);\n\n  const [showSuccess, setShowSuccess] = useState(false);\n\n  const [selectedQuestionIndex, setSelectedQuestionIndex] = useState(0);\n\n  const handleQuestionChange = (index, newText) => {\n    const updatedQuiz = { ...quiz };\n    const updatedQuestions = [...updatedQuiz.quizquestions];\n    updatedQuestions[index].question = newText;\n    updatedQuiz.quizquestions = updatedQuestions;\n    setQuiz(updatedQuiz);\n  };\n\n  const handleAnswerChange = (answerIndex, newValue) => {\n    const updatedQuiz = { ...quiz };\n    const updatedQuestions = [...updatedQuiz.quizquestions];\n    console.log(updatedQuestions);\n    updatedQuestions[selectedQuestionIndex].answers[answerIndex] = newValue;\n    updatedQuiz.quizquestions = updatedQuestions;\n    setQuiz(updatedQuiz);\n  };\n\n  const handleRadioChange = (answerIndex) => {\n    const updatedQuiz = { ...quiz };\n    const updatedQuestions = [...updatedQuiz.quizquestions];\n    updatedQuestions[selectedQuestionIndex].correctAnswerIndex = answerIndex;\n    updatedQuiz.quizquestions = updatedQuestions;\n    setQuiz(updatedQuiz);\n  };\n\n  // const handleEdit = async () => {\n  //   try {\n  //     await axios.put(`https://crudapi.co.uk/api/v1/quiz/${uuid}`, quiz, {\n  //       headers: {\n  //         \"Content-Type\": \"application/json\",\n  //         Authorization: `Bearer xqV72-moMK_a_u_QJTHyybjqNfiMlQpZaoyCWPP_St1hs-a3Lw`,\n  //       },\n  //     });\n  //     setShowSuccess(true);\n  //     console.log(quiz);\n  //   } catch (error) {\n  //     console.error(\"Error updating quiz:\", error.message);\n  //   }\n  // };\n\n  return (\n    <>\n      <nav>\n        <Link\n          to=\"/QuizApp/welcomeadmin\"\n          className={`${styles.f30} ${styles.f200} `}\n        >\n          Quizz\n        </Link>\n      </nav>\n{/* \n      <div className={styles.createquiz}>\n        <aside className={styles.settings}>\n          <h2>{quiz && quiz.quizname}</h2>\n\n          {quiz &&\n            quiz.quizquestions.map((_, index) => (\n              <button\n                key={index}\n                className={styles.qButton}\n                onClick={() => setSelectedQuestionIndex(index)}\n              >\n                {index + 1}\n              </button>\n            ))}\n\n          <button className={styles.btnSaveQuiz} onClick={handleEdit}>\n            Edit Quiz\n          </button>\n          {showSuccess && (\n            <div className={styles.successMessage}>\n              Quiz saved successfully!\n            </div>\n          )}\n        </aside>\n\n        <form className={styles.addQuiz}>\n          <input\n            type=\"text\"\n            className={styles.qInput}\n            placeholder=\"Choose Question to Edit\"\n            value={quiz && quiz.quizquestions[selectedQuestionIndex].question}\n            onChange={(e) =>\n              handleQuestionChange(selectedQuestionIndex, e.target.value)\n            }\n          />\n\n          <div className={styles.answersInputs}>\n            {quiz &&\n              quiz.quizquestions[selectedQuestionIndex].answers.map(\n                (answer, answerIndex) => (\n                  <div key={answerIndex} className={styles.answerFormat}>\n                    <input\n                      type=\"radio\"\n                      name=\"correctAnswer\"\n                      className={styles.answerRadio}\n                      id={`radio${answerIndex}`}\n                      checked={\n                        quiz &&\n                        quiz.quizquestions[selectedQuestionIndex]\n                          .correctAnswerIndex === answerIndex\n                      }\n                      onChange={() => handleRadioChange(answerIndex)}\n                    />\n                    <input\n                      key={answerIndex}\n                      className={`${styles[`Answer${answerIndex + 1}`]} ${\n                        styles.aInput\n                      }`}\n                      type=\"text\"\n                      name=\"\"\n                      id=\"\"\n                      placeholder={`Answer ${answerIndex + 1}`}\n                      value={answer}\n                      onChange={(e) =>\n                        handleAnswerChange(answerIndex, e.target.value)\n                      }\n                    />\n\n                    <label htmlFor={`radio${answerIndex}`}></label>\n                  </div>\n                )\n              )}\n          </div>\n        </form>\n      </div> */}\n    </>\n  );\n};\n\nexport default EditQuiz2;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}