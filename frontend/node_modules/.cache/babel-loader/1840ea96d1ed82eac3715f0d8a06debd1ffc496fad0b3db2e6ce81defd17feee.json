{"ast":null,"code":"import { createAsyncThunk } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\n\n// export const createData = createAsyncThunk(\n//   \"createData\",\n//   async (singUpData, thunkAPI) => {\n//     console.log(singUpData);\n//     try {\n//       const response = await fetch(\"http://localhost:8000/api/user/register/\", {\n//         method: \"POST\",\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//         },\n//         withCredentials: true,\n//         body: JSON.stringify(singUpData),\n//       });\n//       const data = await response.json();\n//       console.log(data, \"THUNK DATA\");\n//       return thunkAPI.fulfillWithValue(data);\n//     } catch (error) {\n//       return thunkAPI.rejectWithValue(error.message, \"THUNK BLOCK\");\n//     }\n//   }\n// );\nexport const createData = createAsyncThunk(\"createData\", async (signUpData, thunkAPI) => {\n  console.log(signUpData);\n  try {\n    const response = await axios.post(\"http://localhost:8000/api/user/register/\", signUpData, {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      withCredentials: true // Include credentials in the request\n    });\n    const data = response.data;\n    console.log(data, \"THUNK DATA\");\n    return data; // Just return the data\n  } catch (error) {\n    console.error(\"Error in createData thunk:\", error);\n    return thunkAPI.rejectWithValue(error.message, \"THUNK BLOCK\");\n  }\n});\nexport const fetchUserData = createAsyncThunk(\"fetchUserData/data\", async (_, thunkAPI) => {\n  try {\n    const response = await fetch(\"https://crudapi.co.uk/api/v1/singupData\", {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${process.env.REACT_APP_API_KEY}`\n      }\n    });\n    if (!response.ok) throw new Error(`BAD RESPONSE`);\n    const data = await response.json();\n    return thunkAPI.fulfillWithValue(data.items);\n  } catch (error) {\n    return thunkAPI.rejectWithValue(error.message);\n  }\n});\nexport const deleteUser = createAsyncThunk(\"deleteUser\", async (id, thunkAPI) => {\n  try {\n    const response = await fetch(`https://crudapi.co.uk/api/v1/singupData/${id}`, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${process.env.REACT_APP_API_KEY}`\n      }\n    });\n    if (!response.ok) console.log(`BAD RESPONSE`);\n    const data = response.json();\n    const deleted = data.items.filter(rest => rest._uuid !== id);\n    console.log(deleted, \"TELEDET\");\n    return thunkAPI.dispatch(deleted);\n  } catch (error) {\n    return thunkAPI.rejectWithValue(error.message);\n  }\n});","map":{"version":3,"names":["createAsyncThunk","axios","createData","signUpData","thunkAPI","console","log","response","post","headers","withCredentials","data","error","rejectWithValue","message","fetchUserData","_","fetch","method","Authorization","process","env","REACT_APP_API_KEY","ok","Error","json","fulfillWithValue","items","deleteUser","id","deleted","filter","rest","_uuid","dispatch"],"sources":["/Users/nino/Desktop/app/quiz_API/quiz_project/frontend/src/store/signup/createData.thunk.js"],"sourcesContent":["import { createAsyncThunk } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\n\n// export const createData = createAsyncThunk(\n//   \"createData\",\n//   async (singUpData, thunkAPI) => {\n//     console.log(singUpData);\n//     try {\n//       const response = await fetch(\"http://localhost:8000/api/user/register/\", {\n//         method: \"POST\",\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//         },\n//         withCredentials: true,\n//         body: JSON.stringify(singUpData),\n//       });\n//       const data = await response.json();\n//       console.log(data, \"THUNK DATA\");\n//       return thunkAPI.fulfillWithValue(data);\n//     } catch (error) {\n//       return thunkAPI.rejectWithValue(error.message, \"THUNK BLOCK\");\n//     }\n//   }\n// );\nexport const createData = createAsyncThunk(\n  \"createData\",\n  async (signUpData, thunkAPI) => {\n    console.log(signUpData);\n    try {\n      const response = await axios.post(\n        \"http://localhost:8000/api/user/register/\",\n        signUpData,\n        {\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          withCredentials: true, // Include credentials in the request\n        }\n      );\n\n      const data = response.data;\n      console.log(data, \"THUNK DATA\");\n      return data; // Just return the data\n    } catch (error) {\n      console.error(\"Error in createData thunk:\", error);\n      return thunkAPI.rejectWithValue(error.message, \"THUNK BLOCK\");\n    }\n  }\n);\n\nexport const fetchUserData = createAsyncThunk(\n  \"fetchUserData/data\",\n  async (_, thunkAPI) => {\n    try {\n      const response = await fetch(\"https://crudapi.co.uk/api/v1/singupData\", {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${process.env.REACT_APP_API_KEY}`,\n        },\n      });\n\n      if (!response.ok) throw new Error(`BAD RESPONSE`);\n      const data = await response.json();\n      return thunkAPI.fulfillWithValue(data.items);\n    } catch (error) {\n      return thunkAPI.rejectWithValue(error.message);\n    }\n  }\n);\n\nexport const deleteUser = createAsyncThunk(\n  \"deleteUser\",\n  async (id, thunkAPI) => {\n    try {\n      const response = await fetch(\n        `https://crudapi.co.uk/api/v1/singupData/${id}`,\n        {\n          method: \"DELETE\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${process.env.REACT_APP_API_KEY}`,\n          },\n        }\n      );\n\n      if (!response.ok) console.log(`BAD RESPONSE`);\n      const data = response.json();\n      const deleted = data.items.filter((rest) => rest._uuid !== id);\n\n      console.log(deleted, \"TELEDET\");\n      return thunkAPI.dispatch(deleted);\n    } catch (error) {\n      return thunkAPI.rejectWithValue(error.message);\n    }\n  }\n);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}